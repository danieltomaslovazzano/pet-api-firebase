const fs = require('fs');
const path = require('path');

/**
 * Simplified E2E Test Reporter
 * 
 * Replaces the overly complex 673-line report.js with a focused,
 * maintainable solution that provides essential reporting features.
 */

function getTimestamp() {
  const now = new Date();
  const yyyy = now.getFullYear();
  const mm = String(now.getMonth() + 1).padStart(2, '0');
  const dd = String(now.getDate()).padStart(2, '0');
  const hh = String(now.getHours()).padStart(2, '0');
  const min = String(now.getMinutes()).padStart(2, '0');
  return `${yyyy}-${mm}-${dd}-${hh}${min}`;
}

class SimpleReporter {
  constructor(group, testName) {
    this.group = group;
    this.testName = testName;
    this.startTime = Date.now();
    this.tests = [];
    this.currentTest = null;
  }

  startTest(testName) {
    this.currentTest = {
      name: testName,
      startTime: Date.now(),
      status: 'RUNNING'
    };
  }

  endTest(status = 'PASSED', error = null) {
    if (this.currentTest) {
      this.currentTest.endTime = Date.now();
      this.currentTest.duration = this.currentTest.endTime - this.currentTest.startTime;
      this.currentTest.status = status;
      if (error) {
        this.currentTest.error = error.message || error;
      }
      this.tests.push(this.currentTest);
      this.currentTest = null;
    }
  }

  writeReport(observations = '') {
    const timestamp = getTimestamp();
    const reportDir = path.join(__dirname, '../reports', this.group);
    
    // Ensure report directory exists
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }
    
    const reportPath = path.join(reportDir, `${timestamp}-${this.testName}.md`);
    
    const totalDuration = Date.now() - this.startTime;
    const passedTests = this.tests.filter(t => t.status === 'PASSED').length;
    const failedTests = this.tests.filter(t => t.status === 'FAILED').length;
    const totalTests = this.tests.length;
    
    const report = `# ${this.group} - ${this.testName}

**Date:** ${new Date().toISOString()}  
**Duration:** ${totalDuration}ms  
**Tests:** ${totalTests} (${passedTests} passed, ${failedTests} failed)

## Test Results

${this.tests.map(test => `
### ${test.name}
- **Status:** ${test.status}
- **Duration:** ${test.duration}ms
${test.error ? `- **Error:** ${test.error}` : ''}
`).join('\n')}

## Summary

${observations || 'No additional observations.'}

---
*Generated by SimpleReporter v1.0*
`;

    try {
      fs.writeFileSync(reportPath, report);
      console.log(`üìä Report written: ${reportPath}`);
    } catch (error) {
      console.error('‚ùå Failed to write report:', error.message);
    }
  }
}

// Legacy compatibility - Enhanced Reporter alias
class EnhancedReporter extends SimpleReporter {
  constructor(group, testName) {
    super(group, testName);
    console.log(`[SIMPLE REPORTER] üöÄ Initialized for ${group}/${testName}`);
  }
}

// Export functions for compatibility
function setupGlobalReporter() {
  // No-op for compatibility
}

function getGlobalReporter() {
  return null; // Let tests create their own reporters
}

function useEnhancedReporter(group, testName) {
  return new SimpleReporter(group, testName);
}

module.exports = {
  SimpleReporter,
  EnhancedReporter, // Alias for backward compatibility
  setupGlobalReporter,
  getGlobalReporter,
  useEnhancedReporter
}; 